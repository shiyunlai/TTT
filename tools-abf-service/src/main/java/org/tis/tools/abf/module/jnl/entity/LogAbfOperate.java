/**
 * auto generated
 * Copyright (C) 2017 bronsp.com, All rights reserved.
 */
package org.tis.tools.abf.module.jnl.entity;

import com.alibaba.fastjson.annotation.JSONField;
import com.baomidou.mybatisplus.annotations.TableId;
import org.tis.tools.abf.module.common.log.OperateType;
import org.tis.tools.abf.module.common.log.enums.OperateResult;
import org.tis.tools.core.entity.enums.CommonEnumDeserializer;
import org.tis.tools.core.utils.StringUtil;

import java.io.Serializable;
import java.util.Date;

/**
 * 
 * <pre>
 * 操作日志
 * 模型文件 ： D:\tistools\tools-core-basic\model\jnl-mysql.erm
 * 业务域：jnl
 * 模型：LOG_ABF_OPERATE 操作日志
 *
 * 记录操作员对ABF系统的操作日志（交易操作日志另见： LOG_TX_TRACE）
 *
 * </pre>
 * @author generated by tools:gen-dao
 *
 */
public class LogAbfOperate implements Serializable {

 	/** serialVersionUID */
	private static final long serialVersionUID = 1L;
	
	/** 对应的数据库表名称 */
	public static final String TABLE_NAME = "LOG_ABF_OPERATE" ; 
	/* LOG_ABF_OPERATE table's columns definition */
	/** GUID ：数据主键<br/><br/>全局唯一标识符（GUID，Globally Unique Identifier） */
	public static final String COLUMN_GUID = "guid" ; 
	/** OPERATE_FROM ：操作渠道<br/><br/> */
	public static final String COLUMN_OPERATE_FROM = "operate_from" ; 
	/** OPERATE_TYPE ：操作类型<br/><br/>见业务字典：DICT_OPERATOR_TYPE */
	public static final String COLUMN_OPERATE_TYPE = "operate_type" ; 
	/** OPERATE_TIME ：操作时间<br/><br/> */
	public static final String COLUMN_OPERATE_TIME = "operate_time" ; 
	/** OPERATE_RESULT ：操作结果<br/><br/>见业务字典：DICT_OPERATOR_RESULT */
	public static final String COLUMN_OPERATE_RESULT = "operate_result" ; 
	/** OPERATE_DESC ：操作描述<br/><br/> */
	public static final String COLUMN_OPERATE_DESC = "operate_desc" ; 
	/** OPERATOR_NAME ：操作员姓名<br/><br/>记录当前操作员姓名（只记录当前值，不随之改变） */
	public static final String COLUMN_OPERATOR_NAME = "operator_name" ; 
	/** USER_ID ：操作员<br/><br/>登陆用户id */
	public static final String COLUMN_USER_ID = "user_id" ; 
	/** APP_CODE ：应用代码<br/><br/> */
	public static final String COLUMN_APP_CODE = "app_code" ; 
	/** APP_NAME ：应用名称<br/><br/> */
	public static final String COLUMN_APP_NAME = "app_name" ; 
	/** FUNC_CODE ：功能编号<br/><br/>业务上对功能的编码 */
	public static final String COLUMN_FUNC_CODE = "func_code" ; 
	/** FUNC_NAME ：功能名称<br/><br/> */
	public static final String COLUMN_FUNC_NAME = "func_name" ; 
	/** RESTFUL_URL ：服务地址<br/><br/>功能对应的RESTFul服务地址 */
	public static final String COLUMN_RESTFUL_URL = "restful_url" ; 
	/** STACK_TRACE ：异常堆栈<br/><br/>记录异常堆栈信息，超过4000的部分被自动丢弃 */
	public static final String COLUMN_STACK_TRACE = "stack_trace" ; 
	/** PROCESS_DESC ：处理描述<br/><br/>记录功能执行时的业务处理信息 */
	public static final String COLUMN_PROCESS_DESC = "process_desc" ; 
	/** 对应的类名 */
	public static final String CLASS_NAME = "org.tis.tools.model.po.jnl.LogAbfOperate";
    /** GUID字段名<br/> */
    public static final String NAME_GUID = "数据主键" ;
    /** OPERATE_FROM字段名<br/> */
    public static final String NAME_OPERATE_FROM = "操作渠道" ;
    /** OPERATE_TYPE字段名<br/> */
    public static final String NAME_OPERATE_TYPE = "操作类型" ;
    /** OPERATE_TIME字段名<br/> */
    public static final String NAME_OPERATE_TIME = "操作时间" ;
    /** OPERATE_RESULT字段名<br/> */
    public static final String NAME_OPERATE_RESULT = "操作结果" ;
    /** OPERATE_DESC字段名<br/> */
    public static final String NAME_OPERATE_DESC = "操作描述" ;
    /** OPERATOR_NAME字段名<br/> */
    public static final String NAME_OPERATOR_NAME = "操作员姓名" ;
    /** USER_ID字段名<br/> */
    public static final String NAME_USER_ID = "操作员" ;
    /** APP_CODE字段名<br/> */
    public static final String NAME_APP_CODE = "应用代码" ;
    /** APP_NAME字段名<br/> */
    public static final String NAME_APP_NAME = "应用名称" ;
    /** FUNC_CODE字段名<br/> */
    public static final String NAME_FUNC_CODE = "功能编号" ;
    /** FUNC_NAME字段名<br/> */
    public static final String NAME_FUNC_NAME = "功能名称" ;
    /** RESTFUL_URL字段名<br/> */
    public static final String NAME_RESTFUL_URL = "服务地址" ;
    /** STACK_TRACE字段名<br/> */
    public static final String NAME_STACK_TRACE = "异常堆栈" ;
    /** PROCESS_DESC字段名<br/> */
    public static final String NAME_PROCESS_DESC = "处理描述" ;

	@TableId
	/** 字段类型：varchar<br/>字段名：数据主键<br/>描述：全局唯一标识符（GUID，Globally Unique Identifier） */
	private String guid ;
	
	/** 字段类型：varchar<br/>字段名：操作渠道<br/>描述： */
	private String operateFrom ;
	
	/** 字段类型：varchar<br/>字段名：操作类型<br/>描述：见业务字典：DICT_OPERATOR_TYPE */
	@JSONField(deserializeUsing = CommonEnumDeserializer.class)
	private OperateType operateType ;
	
	/** 字段类型：date<br/>字段名：操作时间<br/>描述： */
	private Date operateTime ;
	
	/** 字段类型：varchar<br/>字段名：操作结果<br/>描述：见业务字典：DICT_OPERATOR_RESULT */
	private OperateResult operateResult ;
	
	/** 字段类型：varchar<br/>字段名：操作描述<br/>描述： */
	private String operateDesc ;
	
	/** 字段类型：varchar<br/>字段名：操作员姓名<br/>描述：记录当前操作员姓名（只记录当前值，不随之改变） */
	private String operatorName ;
	
	/** 字段类型：varchar<br/>字段名：操作员<br/>描述：登陆用户id */
	private String userId ;
	
	/** 字段类型：varchar<br/>字段名：应用代码<br/>描述： */
	private String appCode ;
	
	/** 字段类型：varchar<br/>字段名：应用名称<br/>描述： */
	private String appName ;
	
	/** 字段类型：varchar<br/>字段名：功能编号<br/>描述：业务上对功能的编码 */
	private String funcCode ;
	
	/** 字段类型：varchar<br/>字段名：功能名称<br/>描述： */
	private String funcName ;
	
	/** 字段类型：varchar<br/>字段名：服务地址<br/>描述：功能对应的RESTFul服务地址 */
	private String restfulUrl ;
	
	/** 字段类型：varchar<br/>字段名：异常堆栈<br/>描述：记录异常堆栈信息，超过4000的部分被自动丢弃 */
	private String stackTrace ;
	
	/** 字段类型：varchar<br/>字段名：处理描述<br/>描述：记录功能执行时的业务处理信息 */
	private String processDesc ;

	/**
	* Default Constructor
	*/
	public LogAbfOperate() {
	}

	
	/**
	 * Set the 数据主键.
	 * 
	 * @param guid
	 *            数据主键
	 */
	public void setGuid(String guid) {
 		this.guid = guid == null ? null : guid.trim() ;
    }
    
    /**
	 * Get the 数据主键.
	 * 
	 * @return 数据主键
	 */
	public String getGuid(){
		return this.guid ;
    }
	
	/**
	 * Set the 操作渠道.
	 * 
	 * @param operateFrom
	 *            操作渠道
	 */
	public void setOperateFrom(String operateFrom) {
 		this.operateFrom = operateFrom == null ? null : operateFrom.trim() ;
    }
    
    /**
	 * Get the 操作渠道.
	 * 
	 * @return 操作渠道
	 */
	public String getOperateFrom(){
		return this.operateFrom ;
    }
	
	/**
	 * Set the 操作类型.
	 * 
	 * @param operateType
	 *            操作类型
	 */
	public void setOperateType(OperateType operateType) {
 		this.operateType = operateType ;
    }
    
    /**
	 * Get the 操作类型.
	 * 
	 * @return 操作类型
	 */
	public OperateType getOperateType(){
		return this.operateType ;
    }
	
	/**
	 * Set the 操作时间.
	 * 
	 * @param operateTime
	 *            操作时间
	 */
	public void setOperateTime(Date operateTime) {
 		this.operateTime = operateTime ;
    }
    
    /**
	 * Get the 操作时间.
	 * 
	 * @return 操作时间
	 */
	public Date getOperateTime(){
		return this.operateTime ;
    }
	
	/**
	 * Set the 操作结果.
	 * 
	 * @param operateResult
	 *            操作结果
	 */
	public void setOperateResult(OperateResult operateResult) {
 		this.operateResult = operateResult ;
    }
    
    /**
	 * Get the 操作结果.
	 * 
	 * @return 操作结果
	 */
	public OperateResult getOperateResult(){
		return this.operateResult ;
    }
	
	/**
	 * Set the 操作描述.
	 * 
	 * @param operateDesc
	 *            操作描述
	 */
	public void setOperateDesc(String operateDesc) {
 		this.operateDesc = operateDesc == null ? null : operateDesc.trim() ;
    }
    
    /**
	 * Get the 操作描述.
	 * 
	 * @return 操作描述
	 */
	public String getOperateDesc(){
		return this.operateDesc ;
    }
	
	/**
	 * Set the 操作员姓名.
	 * 
	 * @param operatorName
	 *            操作员姓名
	 */
	public void setOperatorName(String operatorName) {
 		this.operatorName = operatorName == null ? null : operatorName.trim() ;
    }
    
    /**
	 * Get the 操作员姓名.
	 * 
	 * @return 操作员姓名
	 */
	public String getOperatorName(){
		return this.operatorName ;
    }
	
	/**
	 * Set the 操作员.
	 * 
	 * @param userId
	 *            操作员
	 */
	public void setUserId(String userId) {
 		this.userId = userId == null ? null : userId.trim() ;
    }
    
    /**
	 * Get the 操作员.
	 * 
	 * @return 操作员
	 */
	public String getUserId(){
		return this.userId ;
    }
	
	/**
	 * Set the 应用代码.
	 * 
	 * @param appCode
	 *            应用代码
	 */
	public void setAppCode(String appCode) {
 		this.appCode = appCode == null ? null : appCode.trim() ;
    }
    
    /**
	 * Get the 应用代码.
	 * 
	 * @return 应用代码
	 */
	public String getAppCode(){
		return this.appCode ;
    }
	
	/**
	 * Set the 应用名称.
	 * 
	 * @param appName
	 *            应用名称
	 */
	public void setAppName(String appName) {
 		this.appName = appName == null ? null : appName.trim() ;
    }
    
    /**
	 * Get the 应用名称.
	 * 
	 * @return 应用名称
	 */
	public String getAppName(){
		return this.appName ;
    }
	
	/**
	 * Set the 功能编号.
	 * 
	 * @param funcCode
	 *            功能编号
	 */
	public void setFuncCode(String funcCode) {
 		this.funcCode = funcCode == null ? null : funcCode.trim() ;
    }
    
    /**
	 * Get the 功能编号.
	 * 
	 * @return 功能编号
	 */
	public String getFuncCode(){
		return this.funcCode ;
    }
	
	/**
	 * Set the 功能名称.
	 * 
	 * @param funcName
	 *            功能名称
	 */
	public void setFuncName(String funcName) {
 		this.funcName = funcName == null ? null : funcName.trim() ;
    }
    
    /**
	 * Get the 功能名称.
	 * 
	 * @return 功能名称
	 */
	public String getFuncName(){
		return this.funcName ;
    }
	
	/**
	 * Set the 服务地址.
	 * 
	 * @param restfulUrl
	 *            服务地址
	 */
	public void setRestfulUrl(String restfulUrl) {
 		this.restfulUrl = restfulUrl == null ? null : restfulUrl.trim() ;
    }
    
    /**
	 * Get the 服务地址.
	 * 
	 * @return 服务地址
	 */
	public String getRestfulUrl(){
		return this.restfulUrl ;
    }
	
	/**
	 * Set the 异常堆栈.
	 * 
	 * @param stackTrace
	 *            异常堆栈
	 */
	public void setStackTrace(String stackTrace) {
 		this.stackTrace = stackTrace == null ? null : stackTrace.trim() ;
    }
    
    /**
	 * Get the 异常堆栈.
	 * 
	 * @return 异常堆栈
	 */
	public String getStackTrace(){
		return this.stackTrace ;
    }
	
	/**
	 * Set the 处理描述.
	 * 
	 * @param processDesc
	 *            处理描述
	 */
	public void setProcessDesc(String processDesc) {
 		this.processDesc = processDesc == null ? null : processDesc.trim() ;
    }
    
    /**
	 * Get the 处理描述.
	 * 
	 * @return 处理描述
	 */
	public String getProcessDesc(){
		return this.processDesc ;
    }
	
	public String toString(){
		return StringUtil.toString(this) ;
	}
}